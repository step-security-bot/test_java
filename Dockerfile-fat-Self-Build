# Build the application
FROM gradle:8.12.0-jdk21-alpine AS build

# Set the working directory
WORKDIR /app

# Copy the entire project to the working directory
COPY . .

# Build the application with DOCKER_ENABLE_SECURITY=false
RUN DOCKER_ENABLE_SECURITY=true \
    gradle clean build

# Main stage
FROM alpine:3.20.0

# Copy necessary files
COPY --from=build /app/build/libs/*.jar /app.jar
COPY scripts /scripts
COPY pipeline /pipeline
COPY src/main/resources/static/fonts/*.ttf /usr/share/fonts/opentype/noto/

ARG VERSION_TAG

# Set Environment Variables
ENV DOCKER_ENABLE_SECURITY=false \
    VERSION_TAG=$VERSION_TAG \
    JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -XX:MaxRAMPercentage=75" \
    HOME=/home/stirlingpdfuser \
    PUID=1000 \
    PGID=1000 \
    UMASK=022 \
    FAT_DOCKER=true \
    INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false

# Add testing repositories
RUN echo "@testing https://dl-cdn.alpinelinux.org/alpine/edge/main" | tee -a /etc/apk/repositories && \
    echo "@testing https://dl-cdn.alpinelinux.org/alpine/edge/community" | tee -a /etc/apk/repositories && \
    echo "@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing" | tee -a /etc/apk/repositories

# Upgrade all packages
RUN apk upgrade --no-cache -a

# Install necessary packages one by one for debugging
RUN apk add --no-cache ca-certificates && \
    apk add --no-cache tzdata && \
    apk add --no-cache tini && \
    apk add --no-cache bash && \
    apk add --no-cache curl && \
    apk add --no-cache shadow && \
    apk add --no-cache su-exec && \
    apk add --no-cache openssl && \
    apk add --no-cache openssl-dev && \
    apk add --no-cache openjdk21-jre && \
    apk add --no-cache libreoffice && \
    apk add --no-cache poppler-utils && \
    apk add --no-cache ocrmypdf && \
    apk add --no-cache tesseract-ocr-data-eng && \
    apk add --no-cache font-terminus font-dejavu font-noto font-noto-cjk font-awesome font-noto-extra && \
    apk add --no-cache py3-opencv && \
    apk add --no-cache python3 && \
    apk add --no-cache py3-pip && \
    apk add --no-cache libffi-dev && \
    apk add --no-cache gcc && \
    apk add --no-cache musl-dev && \
    apk add --no-cache python3-dev

# Create virtual environment and install Python packages
RUN python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir unoconv WeasyPrint

# Additional setup
RUN mv /usr/share/tessdata /usr/share/tessdata-original && \
    mkdir -p $HOME /configs /logs /customFiles /pipeline/watchedFolders /pipeline/finishedFolders && \
    fc-cache -f -v && \
    chmod +x /scripts/* && \
    chmod +x /scripts/init.sh && \
    addgroup -S stirlingpdfgroup && adduser -S stirlingpdfuser -G stirlingpdfgroup && \
    chown -R stirlingpdfuser:stirlingpdfgroup $HOME /scripts /usr/share/fonts/opentype/noto /configs /customFiles /pipeline && \
    chown stirlingpdfuser:stirlingpdfgroup /app.jar && \
    tesseract --list-langs

# Set the PATH to include the virtual environment
ENV PATH="/opt/venv/bin:$PATH"

EXPOSE 8080/tcp

# Set user and run command
ENTRYPOINT ["tini", "--", "/scripts/init.sh"]
CMD ["java", "-Dfile.encoding=UTF-8", "-jar", "/app.jar"]
